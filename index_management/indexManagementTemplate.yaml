AWSTemplateFormatVersion: '2010-09-09'
Description: Index management tool for ES
Parameters:
  SecurityGroup:
    Type: String

  S3BucketName:
    Type: String
    Description: Lambda helper package S3 path

  LambdaS3Key:
    Type: String
    Description: Lambda package S3 path

  LambdaS3DeletionKey:
    Type: String
    Description: Lambda package S3 path

  ESHost:
    Type: String
    Description: Host of the AWS ES

Resources:
  RoleIndexManagementScheduleRule:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      RoleName: RoleIndexManagementScheduleRule1

  RoleIndexManagementLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: RoleIndexManagementLambda

      
  IndexManagementLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref LambdaS3Key
      Description: Lambda Function to run AWS Shipper
      Environment:
        Variables:
          ES_HOST: !Ref ESHost
      FunctionName: IndexManagementLambda
      Role: !GetAtt 'RoleIndexManagementLambda.Arn'
      MemorySize: 2048
      Handler: es_index_cleanup.es_index_cleanup_handler
      Runtime: python2.7
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub "YourSubnetA1"
          - Fn::ImportValue: !Sub "YourSubnetA2"

  IndexDeletionManagementLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref LambdaS3DeletionKey
      Description: Lambda Function to run AWS Shipper
      Environment:
        Variables:
          ES_HOST: !Ref ESHost
      FunctionName: IndexDeletionManagementLambda
      Role: !GetAtt 'RoleIndexManagementLambda.Arn'
      MemorySize: 2048
      Handler: es_index_deletion.es_index_cleanup_handler
      Runtime: python2.7
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub "VpcASubnetDmzA1-Platform"
          - Fn::ImportValue: !Sub "VpcASubnetDmzA2-Platform"

  IndexManagementScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "IndexManagementScheduleRule1"
      Description: "Executes IndexManagement lambda on daily basis "
      ScheduleExpression: "cron(0 5 * * ? *)"
      State: "ENABLED"
      RoleArn: !GetAtt 'RoleIndexManagementScheduleRule.Arn'
      Targets:
        -
          Id: "IndexDeletionManagementLambda"
          Arn: !GetAtt "IndexDeletionManagementLambda.Arn"
          Input: '{"index_name": "fluentd"}'
          
  LambdaFluentInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "IndexDeletionManagementLambda"
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "IndexManagementScheduleRule.Arn"

Outputs:
  IndexManagementRoleArn:
    Value: !GetAtt RoleIndexManagementLambda.Arn